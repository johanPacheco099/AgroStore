@using AgroStore.Shared
@using AgroStore.Shared.Interfaces
@using AgroStore.Shared.Services
@using Microsoft.AspNetCore.Components.Authorization
@using AgroStore.Authentication.CustomAuthenticationStateProvider
@using AgroStore.Authentication
@inject IUserService UserService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@page "/Login"
<div class="bgcontenedor">
    <h4 class="fw-bold text-center mt-4">Login</h4>
    <div class="d-flex align-items-center justify-content-center mt-4">
        <form @onsubmit="Authenticate" class="text-center w-50 border border-dark">
        <div class="mb-3 mt-5">
            <label for="lemail" class="me-4">Email:</label>
            <input type="text" id="lemail" class="rounded-2" @bind="lemail">
        </div>
        <div class="mt-5">
            <label for="password" class="me-2">Password:</label>
            <input id="password" class="rounded-2" type="password" @bind="lpass">
        </div>
        <div class="mt-3 mb-4">
            <div class="">
                <button type="submit" class="btn btn-dark">Login</button>
            </div>
            <div class="mt-2 fw-bold">
                <p class="mt-3 small">No estás registrado aún? Registrate</p>
                
                <a href="/Register" class="btn btn-dark mt-0">Registrarse</a>
            </div>
        </div>
    </form>
    </div>
    
</div>



@code {

    private User user = new User();
    private string lemail;
    private string lpass;

    private async Task Authenticate()
    {
        var result = await UserService.GetUserByEmail(lemail);

        if (result == null || result.password != lpass)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Usuario o contraseña incorrectos");
            return;
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new User
                {
                    email = result.email,
                    name = result.name,
                    role = result.role,
                    id = result.id
                });
            NavigationManager.NavigateTo("/Vitrina", true);
        }
    }
    @* private async Task Validation()
    {
        var emailvalidation = await UserService.GetUserByEmail(lemail);
        if (emailvalidation == null || emailvalidation.password != lpass)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Usuario o contraseña incorrectos.");
            return;
        }
        else
        {
            User user = new User{
                email = emailvalidation.email,
                name = emailvalidation.name,
                role = emailvalidation.role,
                id = emailvalidation.id
            };        
        }
    } *@
}
